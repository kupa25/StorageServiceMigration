// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Suddath.Helix.JobMgmt.Infrastructure.Domain;

namespace Suddath.Helix.JobMgmt.Infrastructure
{
    public partial class JobDbContext : DbContext
    {
        public JobDbContext()
        {
        }

        public JobDbContext(DbContextOptions<JobDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountCode> AccountCode { get; set; }
        public virtual DbSet<AccountEntity> AccountEntity { get; set; }
        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<ActivityDetail> ActivityDetail { get; set; }
        public virtual DbSet<ActivityType> ActivityType { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<ApplicationPatch> ApplicationPatch { get; set; }
        public virtual DbSet<ApprovalRequest> ApprovalRequest { get; set; }
        public virtual DbSet<AuthorizedRepresentative> AuthorizedRepresentative { get; set; }
        public virtual DbSet<AuthorizedRepresentativePhone> AuthorizedRepresentativePhone { get; set; }
        public virtual DbSet<BillableItem> BillableItem { get; set; }
        public virtual DbSet<BillableItemAdjustment> BillableItemAdjustment { get; set; }
        public virtual DbSet<BillableItemStatus> BillableItemStatus { get; set; }
        public virtual DbSet<BillableItemType> BillableItemType { get; set; }
        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<Configuration> Configuration { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<DocumentHistory> DocumentHistory { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<Entitlement> Entitlement { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<GLCode> GLCode { get; set; }
        public virtual DbSet<GPTransaction> GPTransaction { get; set; }
        public virtual DbSet<GPTransactionType> GPTransactionType { get; set; }
        public virtual DbSet<IntegrationEventLog> IntegrationEventLog { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceStatus> InvoiceStatus { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobContact> JobContact { get; set; }
        public virtual DbSet<JobStatus> JobStatus { get; set; }
        public virtual DbSet<JobSuperServiceAuthorization> JobSuperServiceAuthorization { get; set; }
        public virtual DbSet<JobSurveyInfo> JobSurveyInfo { get; set; }
        public virtual DbSet<LookupItem> LookupItem { get; set; }
        public virtual DbSet<NewMoves> NewMoves { get; set; }
        public virtual DbSet<PayableItem> PayableItem { get; set; }
        public virtual DbSet<PayableItemAdjustment> PayableItemAdjustment { get; set; }
        public virtual DbSet<PayableItemStatus> PayableItemStatus { get; set; }
        public virtual DbSet<PaymentReceived> PaymentReceived { get; set; }
        public virtual DbSet<PaymentRequest> PaymentRequest { get; set; }
        public virtual DbSet<PaymentRequestStatus> PaymentRequestStatus { get; set; }
        public virtual DbSet<PaymentSent> PaymentSent { get; set; }
        public virtual DbSet<Phone> Phone { get; set; }
        public virtual DbSet<Serilog> Serilog { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceBreak> ServiceBreak { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategory { get; set; }
        public virtual DbSet<ServiceCode> ServiceCode { get; set; }
        public virtual DbSet<ServiceItem> ServiceItem { get; set; }
        public virtual DbSet<ServiceItemDetail> ServiceItemDetail { get; set; }
        public virtual DbSet<ServiceItemStatus> ServiceItemStatus { get; set; }
        public virtual DbSet<ServiceOrder> ServiceOrder { get; set; }
        public virtual DbSet<ServiceOrderAirFreight> ServiceOrderAirFreight { get; set; }
        public virtual DbSet<ServiceOrderAirFreightItem> ServiceOrderAirFreightItem { get; set; }
        public virtual DbSet<ServiceOrderAirFreightLeg> ServiceOrderAirFreightLeg { get; set; }
        public virtual DbSet<ServiceOrderClaimDamage> ServiceOrderClaimDamage { get; set; }
        public virtual DbSet<ServiceOrderClaimInspection> ServiceOrderClaimInspection { get; set; }
        public virtual DbSet<ServiceOrderClaimRepair> ServiceOrderClaimRepair { get; set; }
        public virtual DbSet<ServiceOrderClaimSettlement> ServiceOrderClaimSettlement { get; set; }
        public virtual DbSet<ServiceOrderContact> ServiceOrderContact { get; set; }
        public virtual DbSet<ServiceOrderCustomClearance> ServiceOrderCustomClearance { get; set; }
        public virtual DbSet<ServiceOrderDestinationAgent> ServiceOrderDestinationAgent { get; set; }
        public virtual DbSet<ServiceOrderDestinationAgentPartialDelivery> ServiceOrderDestinationAgentPartialDelivery { get; set; }
        public virtual DbSet<ServiceOrderInsuranceClaim> ServiceOrderInsuranceClaim { get; set; }
        public virtual DbSet<ServiceOrderLineHaul> ServiceOrderLineHaul { get; set; }
        public virtual DbSet<ServiceOrderMoveInfo> ServiceOrderMoveInfo { get; set; }
        public virtual DbSet<ServiceOrderOceanFreight> ServiceOrderOceanFreight { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightContainer> ServiceOrderOceanFreightContainer { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightLCL> ServiceOrderOceanFreightLCL { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightLeg> ServiceOrderOceanFreightLeg { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightLiftVan> ServiceOrderOceanFreightLiftVan { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightLooseItem> ServiceOrderOceanFreightLooseItem { get; set; }
        public virtual DbSet<ServiceOrderOceanFreightVehicle> ServiceOrderOceanFreightVehicle { get; set; }
        public virtual DbSet<ServiceOrderRoadFreight> ServiceOrderRoadFreight { get; set; }
        public virtual DbSet<ServiceOrderRoadFreightLTL> ServiceOrderRoadFreightLTL { get; set; }
        public virtual DbSet<ServiceOrderRoadFreightLeg> ServiceOrderRoadFreightLeg { get; set; }
        public virtual DbSet<ServiceOrderStatus> ServiceOrderStatus { get; set; }
        public virtual DbSet<ServiceOrderStorage> ServiceOrderStorage { get; set; }
        public virtual DbSet<ServiceOrderStoragePartialDelivery> ServiceOrderStoragePartialDelivery { get; set; }
        public virtual DbSet<ServiceOrderStorageRevenue> ServiceOrderStorageRevenue { get; set; }
        public virtual DbSet<ServiceOrderThirdParty> ServiceOrderThirdParty { get; set; }
        public virtual DbSet<ServiceOrderThirdPartyCrate> ServiceOrderThirdPartyCrate { get; set; }
        public virtual DbSet<ServiceOrderThirdPartyService> ServiceOrderThirdPartyService { get; set; }
        public virtual DbSet<Shipment> Shipment { get; set; }
        public virtual DbSet<SuperService> SuperService { get; set; }
        public virtual DbSet<SuperServiceMode> SuperServiceMode { get; set; }
        public virtual DbSet<SuperServiceOrder> SuperServiceOrder { get; set; }
        public virtual DbSet<SuperServiceOrderAccessorial> SuperServiceOrderAccessorial { get; set; }
        public virtual DbSet<SuperServiceOrderCrate> SuperServiceOrderCrate { get; set; }
        public virtual DbSet<SuperServiceOrderStatus> SuperServiceOrderStatus { get; set; }
        public virtual DbSet<SuperServiceOrderSurveyResult> SuperServiceOrderSurveyResult { get; set; }
        public virtual DbSet<TaskOrder> TaskOrder { get; set; }
        public virtual DbSet<Template> Template { get; set; }
        public virtual DbSet<TemplatePack> TemplatePack { get; set; }
        public virtual DbSet<TemplateType> TemplateType { get; set; }
        public virtual DbSet<Transferee> Transferee { get; set; }
        public virtual DbSet<TransfereePhone> TransfereePhone { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<VendorInvoice> VendorInvoice { get; set; }
        public virtual DbSet<VendorInvoiceStatus> VendorInvoiceStatus { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=(LocalDb)\MSSQLLocalDB;;database=Jobs;trusted_connection=yes;");
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=JobsDatabase;Integrated Security=true");

            modelBuilder.Entity<AccountCode>(entity =>
            {
                entity.HasKey(e => e.AccountCode1);

                entity.ToTable("AccountCode", "billing");

                entity.Property(e => e.AccountCode1)
                    .HasColumnName("AccountCode")
                    .HasMaxLength(2);

                entity.Property(e => e.AccountCodeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AccountGroupCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.AccountGroupCodeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("1");
            });

            modelBuilder.Entity<AccountEntity>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AccountingId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.ShortAddress).HasMaxLength(100);

                entity.Property(e => e.Source).HasMaxLength(50);
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.ToTable("Activity", "taskorders");

                entity.Property(e => e.ActivityTypeCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.ActivityTypeCodeNavigation)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.ActivityTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_Activity_ActivityType");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_Activity_TaskOrder");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .HasConstraintName("FK_taskorders_Activity_Shipment");
            });

            modelBuilder.Entity<ActivityDetail>(entity =>
            {
                entity.ToTable("ActivityDetail", "taskorders");

                entity.Property(e => e.ActivityDetailType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActivityDetail)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_ActivityDetail_taskorders_Activity_Id");

                entity.HasOne(d => d.ProviderVendor)
                    .WithMany(p => p.ActivityDetail)
                    .HasForeignKey(d => d.ProviderVendorId)
                    .HasConstraintName("FK_taskorders_ActivityDetail_dbo_Vendor_Id");
            });

            modelBuilder.Entity<ActivityType>(entity =>
            {
                entity.HasKey(e => e.ActivityTypeCode);

                entity.ToTable("ActivityType", "taskorders");

                entity.Property(e => e.ActivityTypeCode).HasMaxLength(10);

                entity.Property(e => e.ActivityTypeDescription).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.Property(e => e.AdditionalAddressInfo).HasMaxLength(50);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.City).HasMaxLength(200);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.CountryCode3).HasMaxLength(3);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApplicationPatch>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ApprovalRequest>(entity =>
            {
                entity.ToTable("ApprovalRequest", "taskorders");

                entity.Property(e => e.ApprovalRequestStatus)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");
            });

            modelBuilder.Entity<AuthorizedRepresentative>(entity =>
            {
                entity.ToTable("AuthorizedRepresentative", "jobs");

                entity.Property(e => e.AlternateEmail).HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EffectiveStartDateTime).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.FirstName).HasMaxLength(100);

                entity.Property(e => e.LastName).HasMaxLength(100);

                entity.Property(e => e.MiddleName).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PrimaryCommunicationPreference).HasMaxLength(100);

                entity.Property(e => e.PrimaryEmail).HasMaxLength(200);

                entity.Property(e => e.SecondaryCommunicationPreference).HasMaxLength(100);

                entity.Property(e => e.SourceIdentifier).HasMaxLength(100);

                entity.Property(e => e.SourceName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(100);

                entity.HasOne(d => d.DestinationAddress)
                    .WithMany(p => p.AuthorizedRepresentativeDestinationAddress)
                    .HasForeignKey(d => d.DestinationAddressId)
                    .HasConstraintName("FK_jobs_AuthorizedRepresentative_dbo_Address_DestinationAddressId");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.AuthorizedRepresentative)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_AuthorizedRepresentative_jobs_Job_JobId");

                entity.HasOne(d => d.OriginAddress)
                    .WithMany(p => p.AuthorizedRepresentativeOriginAddress)
                    .HasForeignKey(d => d.OriginAddressId)
                    .HasConstraintName("FK_jobs_AuthorizedRepresentative_dbo_Address_OriginAddressId");
            });

            modelBuilder.Entity<AuthorizedRepresentativePhone>(entity =>
            {
                entity.HasKey(e => new { e.AuthorizedRepresentativeId, e.PhoneId });

                entity.ToTable("AuthorizedRepresentativePhone", "jobs");

                entity.HasOne(d => d.AuthorizedRepresentative)
                    .WithMany(p => p.AuthorizedRepresentativePhone)
                    .HasForeignKey(d => d.AuthorizedRepresentativeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_AuthorizedRepresentativePhone_jobs_AuthorizedRepresentative_AuthorizedRepresentativeId");

                entity.HasOne(d => d.Phone)
                    .WithMany(p => p.AuthorizedRepresentativePhone)
                    .HasForeignKey(d => d.PhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_AuthorizedRepresentativePhone_dbo_Phone_PhoneId");
            });

            modelBuilder.Entity<BillableItem>(entity =>
            {
                entity.ToTable("BillableItem", "billing");

                entity.Property(e => e.AccrualAdjustmentBy).HasMaxLength(100);

                entity.Property(e => e.AccrualAmountBillingCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualPostedBy).HasMaxLength(100);

                entity.Property(e => e.ActualAdjustmentBy).HasMaxLength(100);

                entity.Property(e => e.ActualAmountBillingCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualPostedBy).HasMaxLength(100);

                entity.Property(e => e.BillToType).HasMaxLength(100);

                entity.Property(e => e.BillableItemStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.BillingCurrency).HasMaxLength(100);

                entity.Property(e => e.BillingCurrencySymbol).HasMaxLength(3);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.GPDocNum).HasMaxLength(17);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OriginalAccrualAmountBillingCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalAccrualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalAccrualPostedBy).HasMaxLength(100);

                entity.Property(e => e.OriginalActualAmountBillingCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalActualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalActualPostedBy).HasMaxLength(100);

                entity.Property(e => e.VoidedBy).HasMaxLength(100);

                entity.Property(e => e.VoidedFinancialPeriodDate).HasColumnType("date");

                entity.Property(e => e.WriteOffAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.WriteOffExplanation).HasMaxLength(1500);

                entity.Property(e => e.WriteOffModifiedBy).HasMaxLength(100);

                entity.Property(e => e.WriteOffReason).HasMaxLength(100);

                entity.HasOne(d => d.BillToAccountEntity)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.BillToAccountEntityId)
                    .HasConstraintName("FK_billing_BillableItem_dbo_AccountEntityId");

                entity.HasOne(d => d.BillToTransferee)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.BillToTransfereeId)
                    .HasConstraintName("FK_billing_BillableItem_dbo_Transferee");

                entity.HasOne(d => d.BillToVendor)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.BillToVendorId)
                    .HasConstraintName("FK_billing_BillableItem_dbo_Vendor");

                entity.HasOne(d => d.BillableItemStatusIdentifierNavigation)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.BillableItemStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_BillableItem_billing_BillableItemStatus");

                entity.HasOne(d => d.BillableItemType)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.BillableItemTypeId)
                    .HasConstraintName("FK_billing_BillableItem_billing_BillableItemType");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_billing_BillableItem_billing_Invoice");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.BillableItem)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_BillableItem_jobs_SuperServiceOrder");
            });

            modelBuilder.Entity<BillableItemAdjustment>(entity =>
            {
                entity.ToTable("BillableItemAdjustment", "billing");

                entity.HasIndex(e => e.GPDocNum)
                    .HasName("UQ_billing_BillableItem_GPDocNum")
                    .IsUnique();

                entity.Property(e => e.AdjustmentBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AdjustmentDateTime).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.AdjustmentStatus)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AdjustmentType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Explanation)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.GPDocNum).HasMaxLength(17);

                entity.Property(e => e.NewAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OldAmountUSD).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.BillableItem)
                    .WithMany(p => p.BillableItemAdjustment)
                    .HasForeignKey(d => d.BillableItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_BillableItemAdjustment_billing_BillableItem");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.BillableItemAdjustment)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_billing_BillableItemAdjustment_billing_Invoice");
            });

            modelBuilder.Entity<BillableItemStatus>(entity =>
            {
                entity.HasKey(e => e.BillableItemStatusIdentifier);

                entity.ToTable("BillableItemStatus", "billing");

                entity.Property(e => e.BillableItemStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.BillableItemStatusDescription)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.BillableItemStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BillableItemType>(entity =>
            {
                entity.ToTable("BillableItemType", "billing");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AccountCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.BillableItemTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("1");

                entity.HasOne(d => d.AccountCodeNavigation)
                    .WithMany(p => p.BillableItemType)
                    .HasForeignKey(d => d.AccountCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_BillableItemType_billing_AccountCode");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.HasKey(e => e.BranchNameIdentifier);

                entity.ToTable("Branch", "jobs");

                entity.HasIndex(e => e.BranchName)
                    .HasName("UQ_jobs_Branch_BranchName")
                    .IsUnique();

                entity.Property(e => e.BranchNameIdentifier).HasMaxLength(50);

                entity.Property(e => e.BranchCode).HasMaxLength(50);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SalesDetailBranchCodePart).HasMaxLength(10);
            });

            modelBuilder.Entity<Configuration>(entity =>
            {
                entity.ToTable("Configuration", "Feedback");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country", "lookups");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Abbreviation2)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Abbreviation3)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.DialingCode)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.IsEnabled)
                    .IsRequired()
                    .HasDefaultValueSql("1");
            });

            modelBuilder.Entity<DocumentHistory>(entity =>
            {
                entity.Property(e => e.DateUploaded).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentHistory)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentHistory_DocumentId_Document_Id");
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Transferee)
                    .WithMany(p => p.Email)
                    .HasForeignKey(d => d.TransfereeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Email_Transferee");
            });

            modelBuilder.Entity<Entitlement>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("Entitlement", "taskorders");

                entity.Property(e => e.JobId).ValueGeneratedNever();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.Job)
                    .WithOne(p => p.Entitlement)
                    .HasForeignKey<Entitlement>(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_Entitlement_taskorders_TaskOrder_JobId");
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.ToTable("ExchangeRate", "currency");

                entity.HasIndex(e => e.BaseCurrency);

                entity.HasIndex(e => e.Currency);

                entity.Property(e => e.BaseCurrency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.HedgeAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("1.0");

                entity.Property(e => e.HedgedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.ToTable("Feedback", "Feedback");

                entity.Property(e => e.CreateDateTime).HasDefaultValueSql("sysdatetimeoffset()");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<GLCode>(entity =>
            {
                entity.HasKey(e => new { e.ReceivableOrPayable, e.AccrualOrActual, e.BranchName, e.RevenueType, e.AccountCode, e.GPDistType });

                entity.ToTable("GLCode", "billing");

                entity.HasIndex(e => e.GLCode1)
                    .HasName("NCI_GLCode");

                entity.Property(e => e.ReceivableOrPayable).HasMaxLength(100);

                entity.Property(e => e.AccrualOrActual).HasMaxLength(100);

                entity.Property(e => e.BranchName).HasMaxLength(100);

                entity.Property(e => e.RevenueType).HasMaxLength(100);

                entity.Property(e => e.AccountCode).HasMaxLength(4);

                entity.Property(e => e.AccountCodeName).HasMaxLength(100);

                entity.Property(e => e.AccountGroupCode).HasMaxLength(4);

                entity.Property(e => e.GLCode1)
                    .HasColumnName("GLCode")
                    .HasMaxLength(100);

                entity.Property(e => e.GPDistTypeMeaning).HasMaxLength(100);

                entity.Property(e => e.SalesDetailBranchCodePart).HasMaxLength(4);

                entity.Property(e => e.SalesDetailItemRevenueTypeCodePart).HasMaxLength(4);
            });

            modelBuilder.Entity<GPTransaction>(entity =>
            {
                entity.ToTable("GPTransaction", "billing");

                entity.Property(e => e.AROrAP).HasMaxLength(10);

                entity.Property(e => e.Accounting_SI_Code).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CreditAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DebitAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FailureReason).HasMaxLength(500);

                entity.Property(e => e.GPDocNum).HasMaxLength(100);

                entity.Property(e => e.GPTransactionStatus)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'in_progress'");

                entity.Property(e => e.GPTransactionTypeIdentifier)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.BillableItem)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.BillableItemId)
                    .HasConstraintName("FK_billing_GPTransaction_billing_BillableItem");

                entity.HasOne(d => d.GPTransactionTypeIdentifierNavigation)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.GPTransactionTypeIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_GPTransaction_billing_GPTransactionType");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_billing_GPTransaction_billing_Invoice");

                entity.HasOne(d => d.PayableItem)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.PayableItemId)
                    .HasConstraintName("FK_billing_GPTransaction_payables_PayableItem");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_GPTransaction_jobs_SuperServiceOrder");

                entity.HasOne(d => d.VendorInvoice)
                    .WithMany(p => p.GPTransaction)
                    .HasForeignKey(d => d.VendorInvoiceId)
                    .HasConstraintName("FK_billing_GPTransaction_payables_VendorInvoice");
            });

            modelBuilder.Entity<GPTransactionType>(entity =>
            {
                entity.HasKey(e => e.GPTransactionTypeIdentifier);

                entity.ToTable("GPTransactionType", "billing");

                entity.Property(e => e.GPTransactionTypeIdentifier).HasMaxLength(100);

                entity.Property(e => e.GPTransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<IntegrationEventLog>(entity =>
            {
                entity.HasKey(e => e.EventId);

                entity.ToTable("IntegrationEventLog", "Logs");

                entity.Property(e => e.EventId).ValueGeneratedNever();

                entity.Property(e => e.Content).IsRequired();

                entity.Property(e => e.EventTypeName)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("Invoice", "billing");

                entity.HasIndex(e => e.InvoiceNumber)
                    .HasName("UNC_billing_Invoice_InvoiceNumber")
                    .IsUnique();

                entity.Property(e => e.BillToType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CreditMemoExplanation).HasMaxLength(1500);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.InvoiceDate).HasColumnType("date");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.InvoiceStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.InvoiceType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'invoice'");

                entity.Property(e => e.LastPaidCheckNumber).HasMaxLength(100);

                entity.Property(e => e.LastPaidDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.TotalInvoiceAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.BillToAccountEntity)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.BillToAccountEntityId)
                    .HasConstraintName("FK_billing_Invoice_dbo_AccountEntityId");

                entity.HasOne(d => d.BillToTransferee)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.BillToTransfereeId)
                    .HasConstraintName("FK_billing_Invoice_dbo_Transferee");

                entity.HasOne(d => d.BillToVendor)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.BillToVendorId)
                    .HasConstraintName("FK_billing_Invoice_dbo_Vendor");

                entity.HasOne(d => d.InvoiceStatusIdentifierNavigation)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.InvoiceStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_Invoice_billing_InvoiceStatus");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_billing_Invoice_jobs_SuperServiceOrder_Id");
            });

            modelBuilder.Entity<InvoiceStatus>(entity =>
            {
                entity.HasKey(e => e.InvoiceStatusIdentifier);

                entity.ToTable("InvoiceStatus", "billing");

                entity.Property(e => e.InvoiceStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.InvoiceStatusDescription).HasMaxLength(500);

                entity.Property(e => e.InvoiceStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("Job", "jobs");

                entity.Property(e => e.AccountCustomerReference).HasMaxLength(100);

                entity.Property(e => e.AccrualStatus).HasMaxLength(100);

                entity.Property(e => e.AuthorizationPONumber).HasMaxLength(50);

                entity.Property(e => e.BillToType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BranchName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.JobSource)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'arive'");

                entity.Property(e => e.JobStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("'active'");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.MoveType).HasMaxLength(50);

                entity.Property(e => e.RevenueType).HasMaxLength(50);

                entity.HasOne(d => d.AccountEntity)
                    .WithMany(p => p.Job)
                    .HasForeignKey(d => d.AccountEntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_Job_dbo_AccountEntity_AccountEntityId");

                entity.HasOne(d => d.Booker)
                    .WithMany(p => p.Job)
                    .HasForeignKey(d => d.BookerId)
                    .HasConstraintName("FK_jobs_Job_dbo_Vendor_BookerId");

                entity.HasOne(d => d.BranchNameNavigation)
                    .WithMany(p => p.Job)
                    .HasForeignKey(d => d.BranchName)
                    .HasConstraintName("FK_Job_Branch");

                entity.HasOne(d => d.DestinationAddress)
                    .WithMany(p => p.JobDestinationAddress)
                    .HasForeignKey(d => d.DestinationAddressId)
                    .HasConstraintName("FK_jobs_Job_dbo_Address_DestinationAddressId");

                entity.HasOne(d => d.JobStatusNavigation)
                    .WithMany(p => p.Job)
                    .HasForeignKey(d => d.JobStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_Job_jobs_JobStatus_JobStatus");

                entity.HasOne(d => d.OriginAddress)
                    .WithMany(p => p.JobOriginAddress)
                    .HasForeignKey(d => d.OriginAddressId)
                    .HasConstraintName("FK_jobs_Job_dbo_Address_OriginAddressId");

                entity.HasOne(d => d.Transferee)
                    .WithMany(p => p.Job)
                    .HasForeignKey(d => d.TransfereeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_Job_dbo_Transferee_TransfereeId");
            });

            modelBuilder.Entity<JobContact>(entity =>
            {
                entity.ToTable("JobContact", "jobs");

                entity.Property(e => e.ContactType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(100);

                entity.Property(e => e.PhoneCountryCode).HasMaxLength(10);

                entity.Property(e => e.PhoneExtension).HasMaxLength(10);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobContact)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_JobContact_jobs_Job_JobId");
            });

            modelBuilder.Entity<JobStatus>(entity =>
            {
                entity.HasKey(e => e.JobStatusIdentifier);

                entity.ToTable("JobStatus", "jobs");

                entity.Property(e => e.JobStatusIdentifier).HasMaxLength(50);

                entity.Property(e => e.JobStatusDescription).HasMaxLength(500);

                entity.Property(e => e.JobStatusDisplayName).HasMaxLength(50);
            });

            modelBuilder.Entity<JobSuperServiceAuthorization>(entity =>
            {
                entity.ToTable("JobSuperServiceAuthorization", "jobs");

                entity.HasIndex(e => new { e.JobId, e.SuperServiceId, e.MeasurementType })
                    .HasName("UNC_JobId_SuperServiceId_MeasurementType")
                    .IsUnique();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.MeasurementType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobSuperServiceAuthorization)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_JobSuperServiceAuthorization_jobs_Job_JobId");

                entity.HasOne(d => d.SuperService)
                    .WithMany(p => p.JobSuperServiceAuthorization)
                    .HasForeignKey(d => d.SuperServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_JobSuperServiceAuthorization_service_SuperService_ServiceId");
            });

            modelBuilder.Entity<JobSurveyInfo>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("JobSurveyInfo", "survey");

                entity.Property(e => e.JobId).ValueGeneratedNever();

                entity.Property(e => e.ActualSurveyDate).HasColumnType("date");

                entity.Property(e => e.DestinationAgentName).HasMaxLength(100);

                entity.Property(e => e.OriginAgentName).HasMaxLength(100);

                entity.Property(e => e.QuoteApprovedDate).HasColumnType("date");

                entity.Property(e => e.QuoteSendDate).HasColumnType("date");

                entity.Property(e => e.ReceivedDate).HasColumnType("date");

                entity.Property(e => e.RequestedPackEndDate).HasColumnType("date");

                entity.Property(e => e.RequestedPackEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.RequestedPackStartDate).HasColumnType("date");

                entity.Property(e => e.RequestedPackStartDateTime).HasColumnType("datetime");

                entity.Property(e => e.SendToPricingDate).HasColumnType("date");

                entity.Property(e => e.SurveyVendorName).HasMaxLength(100);

                entity.Property(e => e.SurveyorName).HasMaxLength(100);

                entity.HasOne(d => d.Job)
                    .WithOne(p => p.JobSurveyInfo)
                    .HasForeignKey<JobSurveyInfo>(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_survey_JobSurveyInfo__jobs_Job_JobId");

                entity.HasOne(d => d.SurveyVendor)
                    .WithMany(p => p.JobSurveyInfo)
                    .HasForeignKey(d => d.SurveyVendorId)
                    .HasConstraintName("FK_survey_JobSurveyInfo_dbo_Vendor_SurveyVendorId");
            });

            modelBuilder.Entity<LookupItem>(entity =>
            {
                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Enabled)
                    .IsRequired()
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Value).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<NewMoves>(entity =>
            {
                entity.Property(e => e.AccountId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.MoveId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.PurchaseOrderNo).HasMaxLength(50);

                entity.Property(e => e.System)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PayableItem>(entity =>
            {
                entity.ToTable("PayableItem", "payables");

                entity.Property(e => e.AccrualAdjustmentBy).HasMaxLength(100);

                entity.Property(e => e.AccrualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualAmountVendorCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccrualPostedBy).HasMaxLength(100);

                entity.Property(e => e.ActualAdjustmentBy).HasMaxLength(100);

                entity.Property(e => e.ActualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualAmountVendorCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ActualPostedBy).HasMaxLength(100);

                entity.Property(e => e.BillFromType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.GPDocNum).HasMaxLength(17);

                entity.Property(e => e.HoldType).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OriginalAccrualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalAccrualAmountVendorCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalAccrualPostedBy).HasMaxLength(100);

                entity.Property(e => e.OriginalActualAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalActualAmountVendorCurrency).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OriginalActualPostedBy).HasMaxLength(100);

                entity.Property(e => e.PayableItemStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.VendorCurrency).HasMaxLength(100);

                entity.Property(e => e.VendorCurrencySymbol).HasMaxLength(3);

                entity.Property(e => e.VendorInvoiceDate).HasColumnType("date");

                entity.Property(e => e.VendorInvoiceNumber).HasMaxLength(100);

                entity.Property(e => e.VoidedBy).HasMaxLength(100);

                entity.Property(e => e.VoidedFinancialPeriodDate).HasColumnType("date");

                entity.Property(e => e.WriteOffAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.WriteOffExplanation).HasMaxLength(1500);

                entity.Property(e => e.WriteOffModifiedBy).HasMaxLength(100);

                entity.Property(e => e.WriteOffReason).HasMaxLength(100);

                entity.HasOne(d => d.BillFromAccountEntity)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.BillFromAccountEntityId)
                    .HasConstraintName("FK_payables_PayableItem_dbo_AccountEntityId");

                entity.HasOne(d => d.BillFromTransferee)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.BillFromTransfereeId)
                    .HasConstraintName("FK_payables_PayableItem_dbo_Transferee");

                entity.HasOne(d => d.BillFromVendor)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.BillFromVendorId)
                    .HasConstraintName("FK_payables_PayableItem_dbo_VendorId");

                entity.HasOne(d => d.BillableItemType)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.BillableItemTypeId)
                    .HasConstraintName("FK_payables_PayableItem_payables_BillableItemType");

                entity.HasOne(d => d.PayableItemStatusIdentifierNavigation)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.PayableItemStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_payables_PayableItem_payables_PayableItemStatus");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_payables_PayableItem_jobs_SuperServiceOrder");

                entity.HasOne(d => d.VendorInvoice)
                    .WithMany(p => p.PayableItem)
                    .HasForeignKey(d => d.VendorInvoiceId)
                    .HasConstraintName("FK_payables_PayableItem_payables_VendorInvoice");
            });

            modelBuilder.Entity<PayableItemAdjustment>(entity =>
            {
                entity.ToTable("PayableItemAdjustment", "payables");

                entity.HasIndex(e => e.GPDocNum)
                    .HasName("UQ_payables_PayableItem_GPDocNum")
                    .IsUnique();

                entity.Property(e => e.AdjustmentBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AdjustmentDateTime).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.AdjustmentStatus)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.AdjustmentType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Explanation)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.GPDocNum).HasMaxLength(17);

                entity.Property(e => e.NewAmountUSD).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OldAmountUSD).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.PayableItem)
                    .WithMany(p => p.PayableItemAdjustment)
                    .HasForeignKey(d => d.PayableItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_payables_PayableItemAdjustment_payables_PayableItem");

                entity.HasOne(d => d.VendorInvoice)
                    .WithMany(p => p.PayableItemAdjustment)
                    .HasForeignKey(d => d.VendorInvoiceId)
                    .HasConstraintName("FK_payables_PayableItemAdjustment_payables_VendorInvoice");
            });

            modelBuilder.Entity<PayableItemStatus>(entity =>
            {
                entity.HasKey(e => e.PayableItemStatusIdentifier);

                entity.ToTable("PayableItemStatus", "payables");

                entity.Property(e => e.PayableItemStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.PayableItemStatusDescription)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayableItemStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<PaymentReceived>(entity =>
            {
                entity.ToTable("PaymentReceived", "billing");

                entity.Property(e => e.Accounting_SI_Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CheckNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.GPPaymentDocNum)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaidDate).HasColumnType("date");

                entity.Property(e => e.VoidedFinancialPeriodDate).HasColumnType("date");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.PaymentReceived)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_billing_PaymentReceived_billing_Invoice");
            });

            modelBuilder.Entity<PaymentRequest>(entity =>
            {
                entity.ToTable("PaymentRequest", "taskorders");

                entity.Property(e => e.AmountPaidByTppsToArcUSD).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApprovedTotalAmountUSD).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.GovInvoiceNumber).HasMaxLength(100);

                entity.Property(e => e.GovPaymentRequestNumber).HasMaxLength(100);

                entity.Property(e => e.GovRejectionReason).HasMaxLength(500);

                entity.Property(e => e.HomeFrontRejectionReason).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PaymentRequestStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.RequestedTotalAmountUSD).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.PaymentRequest)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_PaymentRequest_taskorders_TaskOrder_JobId");

                entity.HasOne(d => d.PaymentRequestStatusIdentifierNavigation)
                    .WithMany(p => p.PaymentRequest)
                    .HasForeignKey(d => d.PaymentRequestStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_PaymentRequest_taskorders_PaymentRequestStatus_PaymentRequestStatusIdentifier");
            });

            modelBuilder.Entity<PaymentRequestStatus>(entity =>
            {
                entity.HasKey(e => e.PaymentRequestStatusIdentifier);

                entity.ToTable("PaymentRequestStatus", "taskorders");

                entity.Property(e => e.PaymentRequestStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.PaymentRequestStatusDescription)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PaymentRequestStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<PaymentSent>(entity =>
            {
                entity.ToTable("PaymentSent", "payables");

                entity.Property(e => e.Accounting_SI_Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CheckNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.GPPaymentVoucherNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaidDate).HasColumnType("date");

                entity.Property(e => e.VendorInvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.VoidedFinancialPeriodDate).HasColumnType("date");

                entity.HasOne(d => d.VendorInvoice)
                    .WithMany(p => p.PaymentSent)
                    .HasForeignKey(d => d.VendorInvoiceId)
                    .HasConstraintName("FK_payables_PaymentSent_payables_VendorInvoice");
            });

            modelBuilder.Entity<Phone>(entity =>
            {
                entity.Property(e => e.CountryCode).HasMaxLength(10);

                entity.Property(e => e.DialCode).HasMaxLength(10);

                entity.Property(e => e.Extension).HasMaxLength(50);

                entity.Property(e => e.NationalNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Primary).HasDefaultValueSql("0");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<Serilog>(entity =>
            {
                entity.ToTable("Serilog", "Logs");

                entity.HasIndex(e => e.Level);

                entity.Property(e => e.Level).HasMaxLength(128);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.ToTable("Service", "service");

                entity.Property(e => e.ServiceAbbreviation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.SuperService)
                    .WithMany(p => p.InverseSuperService)
                    .HasForeignKey(d => d.SuperServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_service_Service_service_SuperService_SuperServiceId");
            });

            modelBuilder.Entity<ServiceBreak>(entity =>
            {
                entity.ToTable("ServiceBreak", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ServiceBreak)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceBreak_jobs_Job_JobId");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ServiceBreak)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceBreak_dbo_Vendor_VendorId");
            });

            modelBuilder.Entity<ServiceCategory>(entity =>
            {
                entity.ToTable("ServiceCategory", "service");

                entity.Property(e => e.ServiceCategoryName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCode>(entity =>
            {
                entity.HasKey(e => e.ServiceCode1);

                entity.ToTable("ServiceCode", "taskorders");

                entity.Property(e => e.ServiceCode1)
                    .HasColumnName("ServiceCode")
                    .HasMaxLength(10);

                entity.Property(e => e.ActivityTypeCode).HasMaxLength(10);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("1");

                entity.Property(e => e.ServiceCodeDescription)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ActivityTypeCodeNavigation)
                    .WithMany(p => p.ServiceCode)
                    .HasForeignKey(d => d.ActivityTypeCode)
                    .HasConstraintName("FK_taskorders_ServiceCode_taskorders_ActivityType_ActivityTypeCode");
            });

            modelBuilder.Entity<ServiceItem>(entity =>
            {
                entity.ToTable("ServiceItem", "taskorders");

                entity.HasIndex(e => e.ServiceItemIdentifier)
                    .HasName("UQ_taskorders_ServiceItem_ServiceItemIdentifier")
                    .IsUnique();

                entity.Property(e => e.AdjudicatedReason).HasMaxLength(2000);

                entity.Property(e => e.CrateDimensionIdentifier).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.GovPaymentRequestIdentifier).HasMaxLength(100);

                entity.Property(e => e.GovPriceUSD).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GovRejectionReason).HasMaxLength(500);

                entity.Property(e => e.HomeFrontRejectionReason).HasMaxLength(500);

                entity.Property(e => e.HomefrontPriceUSD).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ItemDimensionIdentifier).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PickupPostalCode).HasMaxLength(100);

                entity.Property(e => e.Reason).HasMaxLength(255);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RequestedPriceUSD).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestedServiceCode).HasMaxLength(10);

                entity.Property(e => e.RequestedServiceIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceItemIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceItemPaymentRequestStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceItemStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.ShuttlePickupAddress).HasMaxLength(255);

                entity.Property(e => e.SitWeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SourceSystem).HasMaxLength(100);

                entity.HasOne(d => d.ApprovalRequest)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.ApprovalRequestId)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_AprovalRequest_ApprovalRequestId");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_TaskOrder_JobId");

                entity.HasOne(d => d.PaymentRequest)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.PaymentRequestId)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_PaymentRequest_PaymentRequestId");

                entity.HasOne(d => d.RequestedServiceCodeNavigation)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.RequestedServiceCode)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_ServiceCode_ServiceCodeIdentifier");

                entity.HasOne(d => d.ServiceItemPaymentRequestStatusIdentifierNavigation)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.ServiceItemPaymentRequestStatusIdentifier)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_PaymentRequestStatus_ServiceItemPaymentRequestStatusIdentifier");

                entity.HasOne(d => d.ServiceItemStatusIdentifierNavigation)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.ServiceItemStatusIdentifier)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_ServiceItemStatus_ServiceItemStatusIdentifier");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.ServiceItem)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .HasConstraintName("FK_taskorders_ServiceItem_taskorders_Shipment_SuperServiceOrderId");
            });

            modelBuilder.Entity<ServiceItemDetail>(entity =>
            {
                entity.ToTable("ServiceItemDetail", "taskorders");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.ServiceItemDetailDateTime).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ServiceItemDetailType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ServiceItem)
                    .WithMany(p => p.ServiceItemDetail)
                    .HasForeignKey(d => d.ServiceItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_ServiceItemDetail_taskorders_ServiceItem_ServiceItemId");
            });

            modelBuilder.Entity<ServiceItemStatus>(entity =>
            {
                entity.HasKey(e => e.ServiceItemStatusIdentifier);

                entity.ToTable("ServiceItemStatus", "taskorders");

                entity.Property(e => e.ServiceItemStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceItemStatusDescription)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ServiceItemStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceOrder>(entity =>
            {
                entity.ToTable("ServiceOrder", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteReferenceNumber).HasMaxLength(100);

                entity.Property(e => e.ServiceOrderStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("'queued'");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrder_jobs_Job_JobId");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrder_jobs_Service_ServiceId");

                entity.HasOne(d => d.ServiceOrderStatusIdentifierNavigation)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.ServiceOrderStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrder_jobs_ServiceOrderStatus_ServiceOrderStatusIdentifier");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrder_jobs_SuperServiceOrder_SuperServiceOrderId");

                entity.HasOne(d => d.Transferee)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.TransfereeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrder_dbo_Transferee_TransfereeId");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ServiceOrder)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_jobs_ServiceOrder_dbo_Vendor_VendorId");
            });

            modelBuilder.Entity<ServiceOrderAirFreight>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderAirFreight", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.BookingDate).HasColumnType("date");

                entity.Property(e => e.CountryOfIssue).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EINNumber).HasMaxLength(100);

                entity.Property(e => e.HouseAirwayBillNumber).HasMaxLength(100);

                entity.Property(e => e.ITNFiledDate).HasColumnType("date");

                entity.Property(e => e.ITNNumber).HasMaxLength(100);

                entity.Property(e => e.MasterAwbNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedUnit).HasMaxLength(100);

                entity.Property(e => e.XTNNumber).HasMaxLength(100);

                entity.HasOne(d => d.CarrierVendor)
                    .WithMany(p => p.ServiceOrderAirFreight)
                    .HasForeignKey(d => d.CarrierVendorId)
                    .HasConstraintName("FK_ServiceOrderAirFreight_Vendor");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderAirFreight)
                    .HasForeignKey<ServiceOrderAirFreight>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderAirFreight_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderAirFreightItem>(entity =>
            {
                entity.ToTable("ServiceOrderAirFreightItem", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DimensionsFT).HasMaxLength(100);

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ItemType).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderAirFreightItem)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderAirFreightItem_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderAirFreightLeg>(entity =>
            {
                entity.ToTable("ServiceOrderAirFreightLeg", "jobs");

                entity.Property(e => e.ActualArrivalDate).HasColumnType("date");

                entity.Property(e => e.ActualDepartureDate).HasColumnType("date");

                entity.Property(e => e.AirlinePrefix).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DestinationIataCode).HasMaxLength(3);

                entity.Property(e => e.DestinationName).HasMaxLength(100);

                entity.Property(e => e.EstimatedArrivalDate).HasColumnType("date");

                entity.Property(e => e.EstimatedDepartureDate).HasColumnType("date");

                entity.Property(e => e.FlightNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.OriginIataCode).HasMaxLength(3);

                entity.Property(e => e.OriginName).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderAirFreightLeg)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderAirFreightLeg_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderClaimDamage>(entity =>
            {
                entity.ToTable("ServiceOrderClaimDamage", "jobs");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DamageDetails).HasMaxLength(200);

                entity.Property(e => e.DamageType).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.ServiceOrderClaim)
                    .WithMany(p => p.ServiceOrderClaimDamage)
                    .HasForeignKey(d => d.ServiceOrderClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderClaimDamage_jobs_ServiceOrderInsuranceClaim_ServiceOrderId");
            });

            modelBuilder.Entity<ServiceOrderClaimInspection>(entity =>
            {
                entity.ToTable("ServiceOrderClaimInspection", "jobs");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.InspectionDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.HasOne(d => d.ServiceOrderClaim)
                    .WithMany(p => p.ServiceOrderClaimInspection)
                    .HasForeignKey(d => d.ServiceOrderClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderClaimInspection_jobs_ServiceOrderInsuranceClaim_ServiceOrderId");
            });

            modelBuilder.Entity<ServiceOrderClaimRepair>(entity =>
            {
                entity.ToTable("ServiceOrderClaimRepair", "jobs");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.RepairDate).HasColumnType("date");

                entity.HasOne(d => d.ServiceOrderClaim)
                    .WithMany(p => p.ServiceOrderClaimRepair)
                    .HasForeignKey(d => d.ServiceOrderClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderClaimRepair_jobs_ServiceOrderInsuranceClaim_ServiceOrderId");
            });

            modelBuilder.Entity<ServiceOrderClaimSettlement>(entity =>
            {
                entity.ToTable("ServiceOrderClaimSettlement", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.SettlementAcceptedDate).HasColumnType("date");

                entity.Property(e => e.SettlementOfferedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.SettlementOfferedDate).HasColumnType("date");

                entity.HasOne(d => d.ServiceOrderInsuranceClaim)
                    .WithMany(p => p.ServiceOrderClaimSettlement)
                    .HasForeignKey(d => d.ServiceOrderInsuranceClaimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderClaimSettlement_ServiceOrderInsuranceClaim");
            });

            modelBuilder.Entity<ServiceOrderContact>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Phone).HasMaxLength(100);

                entity.Property(e => e.PhoneCountryCode).HasMaxLength(10);

                entity.Property(e => e.PhoneExtension).HasMaxLength(10);

                entity.Property(e => e.PhoneType).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderContact)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderContact_jobs_ServiceOrder_ServiceOrderId");
            });

            modelBuilder.Entity<ServiceOrderCustomClearance>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderCustomClearance", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.AgentType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.CustomsEntryDate).HasColumnType("date");

                entity.Property(e => e.CustomsReleaseDate).HasColumnType("date");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DocumentOutDate).HasColumnType("date");

                entity.Property(e => e.ISFDocumentReceivedDate).HasColumnType("date");

                entity.Property(e => e.ISFMatchDate).HasColumnType("date");

                entity.Property(e => e.ISFReceivedDate).HasColumnType("date");

                entity.Property(e => e.ISFReferenceNumber).HasMaxLength(100);

                entity.Property(e => e.ISFSendDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderCustomClearance)
                    .HasForeignKey<ServiceOrderCustomClearance>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderCustomClearance_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderDestinationAgent>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderDestinationAgent", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ActualDeliveryEndDate).HasColumnType("date");

                entity.Property(e => e.ActualDeliveryStartDate).HasColumnType("date");

                entity.Property(e => e.ActualUnpackEndDate).HasColumnType("date");

                entity.Property(e => e.ActualUnpackStartDate).HasColumnType("date");

                entity.Property(e => e.AgentType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CrewLeaderName).HasMaxLength(100);

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DocumentsOutDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PreAdviceSentDate).HasColumnType("date");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedUnit).HasMaxLength(100);

                entity.Property(e => e.RemainingWeightToDeliverLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RequestedDeliveryEndDate).HasColumnType("date");

                entity.Property(e => e.RequestedDeliveryStartDate).HasColumnType("date");

                entity.Property(e => e.ReweighWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.SITInDate).HasColumnType("date");

                entity.Property(e => e.SITLastAuthorizedDate).HasColumnType("date");

                entity.Property(e => e.SITOutDate).HasColumnType("date");

                entity.Property(e => e.ScheduledDeliveryEndDate).HasColumnType("date");

                entity.Property(e => e.ScheduledDeliveryStartDate).HasColumnType("date");

                entity.Property(e => e.SignedDeliveryDocumentsReceivedDate).HasColumnType("date");

                entity.Property(e => e.TotalWeightDeliveredLb).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderDestinationAgent)
                    .HasForeignKey<ServiceOrderDestinationAgent>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderDestinationAgent_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderDestinationAgentPartialDelivery>(entity =>
            {
                entity.ToTable("ServiceOrderDestinationAgentPartialDelivery", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PartialDeliveryDate).HasColumnType("date");

                entity.Property(e => e.WeightDeliveredLb).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderDestinationAgentPartialDelivery)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderDestinationAgentPartialDelivery_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderInsuranceClaim>(entity =>
            {
                entity.ToTable("ServiceOrderInsuranceClaim", "jobs");

                entity.Property(e => e.AssigneePaidDate).HasColumnType("date");

                entity.Property(e => e.ClaimDate).HasColumnType("date");

                entity.Property(e => e.ClaimNumber).HasMaxLength(50);

                entity.Property(e => e.ClaimStatus).HasMaxLength(100);

                entity.Property(e => e.ClaimantDocsCreatedDate).HasColumnType("date");

                entity.Property(e => e.ClaimedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Declaration).HasMaxLength(100);

                entity.Property(e => e.DeductibleAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GoodwillAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.HHGAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.HighValueAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InactivityClosedDate).HasColumnType("date");

                entity.Property(e => e.InsuranceCarrierName).HasMaxLength(50);

                entity.Property(e => e.InsuranceType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayableRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PayableRateType).HasMaxLength(50);

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalInsuranceAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VehicleAmount).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderInsuranceClaim)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderInsuranceClaim_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderLineHaul>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderLineHaul", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ActualDropDate).HasColumnType("date");

                entity.Property(e => e.ActualPickupDate).HasColumnType("date");

                entity.Property(e => e.AgentType).HasMaxLength(100);

                entity.Property(e => e.ChassisCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DaysType).HasMaxLength(100);

                entity.Property(e => e.FSC).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LastFreeDate).HasColumnType("date");

                entity.Property(e => e.LastFreeDateAtPort).HasColumnType("date");

                entity.Property(e => e.LineHaulType).HasMaxLength(100);

                entity.Property(e => e.LiveLoadDate).HasColumnType("date");

                entity.Property(e => e.LiveUnloadDate).HasColumnType("date");

                entity.Property(e => e.LocationType).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RequestedDropDate).HasColumnType("date");

                entity.Property(e => e.RequestedPickupDate).HasColumnType("date");

                entity.Property(e => e.SendOrderDate).HasColumnType("date");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderLineHaul)
                    .HasForeignKey<ServiceOrderLineHaul>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderLineHaul_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderMoveInfo>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderMoveInfo", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ActualPackEndDate).HasColumnType("date");

                entity.Property(e => e.ActualPackStartDate).HasColumnType("date");

                entity.Property(e => e.ActualPickupEndDate).HasColumnType("date");

                entity.Property(e => e.ActualPickupStartDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CrewLeaderName).HasMaxLength(100);

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EstimatedPackEndDate).HasColumnType("date");

                entity.Property(e => e.EstimatedPackStartDate).HasColumnType("date");

                entity.Property(e => e.EstimatedPickupEndDate).HasColumnType("date");

                entity.Property(e => e.EstimatedPickupStartDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightKg).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.OAFinalsReceivedDate).HasColumnType("date");

                entity.Property(e => e.OAGreenLightDate).HasColumnType("date");

                entity.Property(e => e.OAInstructionsSentDate).HasColumnType("date");

                entity.Property(e => e.OASubmittedToFMCDate).HasColumnType("date");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedUnit).HasMaxLength(100);

                entity.Property(e => e.SITInDate).HasColumnType("date");

                entity.Property(e => e.SITLastAuthorizedDate).HasColumnType("date");

                entity.Property(e => e.SITOutDate).HasColumnType("date");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderMoveInfo)
                    .HasForeignKey<ServiceOrderMoveInfo>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderMoveInfo_jobs_ServiceOrder_ServiceOrderId");
            });

            modelBuilder.Entity<ServiceOrderOceanFreight>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderOceanFreight", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.BookingDate).HasColumnType("date");

                entity.Property(e => e.CarrierBookingNumber).HasMaxLength(100);

                entity.Property(e => e.CountryOfIssue).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EINNumber).HasMaxLength(100);

                entity.Property(e => e.EarliestReturnDate).HasColumnType("date");

                entity.Property(e => e.FreightContractorName).HasMaxLength(100);

                entity.Property(e => e.HouseNOVCCBOLNumber).HasMaxLength(100);

                entity.Property(e => e.ITNFiledDate).HasColumnType("date");

                entity.Property(e => e.ITNNumber).HasMaxLength(100);

                entity.Property(e => e.MasterBOLNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NVOCCBookingNumber).HasMaxLength(100);

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedUnit).HasMaxLength(100);

                entity.Property(e => e.XTNNumber).HasMaxLength(100);

                entity.HasOne(d => d.CarrierVendor)
                    .WithMany(p => p.ServiceOrderOceanFreight)
                    .HasForeignKey(d => d.CarrierVendorId)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreight_Vendor");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderOceanFreight)
                    .HasForeignKey<ServiceOrderOceanFreight>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreight_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightContainer>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightContainer", "jobs");

                entity.Property(e => e.ContainerNumber).HasMaxLength(100);

                entity.Property(e => e.ContainerType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.SealNumber).HasMaxLength(100);

                entity.Property(e => e.TareWeightLb).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderOceanFreightContainer)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightContainer_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightLCL>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightLCL", "jobs");

                entity.Property(e => e.ContainerNumber).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DimensionsFT).HasMaxLength(100);

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderOceanFreightLCL)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightLCL_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightLeg>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightLeg", "jobs");

                entity.Property(e => e.ActualArrivalDate).HasColumnType("date");

                entity.Property(e => e.ActualDepartureDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DestinationLoCode).HasMaxLength(5);

                entity.Property(e => e.DestinationName).HasMaxLength(100);

                entity.Property(e => e.EstimatedArrivalDate).HasColumnType("date");

                entity.Property(e => e.EstimatedDepartureDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.OriginLoCode).HasMaxLength(5);

                entity.Property(e => e.OriginName).HasMaxLength(100);

                entity.Property(e => e.VesselName).HasMaxLength(100);

                entity.Property(e => e.VoyageNumber).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderOceanFreightLeg)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightLeg_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightLiftVan>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightLiftVan", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DimensionsFT).HasMaxLength(100);

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrderOceanFreightContainer)
                    .WithMany(p => p.ServiceOrderOceanFreightLiftVan)
                    .HasForeignKey(d => d.ServiceOrderOceanFreightContainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightLiftVan_jobs_ServiceOrderOceanFreightContainer");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightLooseItem>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightLooseItem", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrderOceanFreightContainer)
                    .WithMany(p => p.ServiceOrderOceanFreightLooseItem)
                    .HasForeignKey(d => d.ServiceOrderOceanFreightContainerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightLooseItem_jobs_ServiceOrderOceanFreightContainer");
            });

            modelBuilder.Entity<ServiceOrderOceanFreightVehicle>(entity =>
            {
                entity.ToTable("ServiceOrderOceanFreightVehicle", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DrainStatementReceivedDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.TitleFromShipperReceivedDate).HasColumnType("date");

                entity.Property(e => e.TitleNumber).HasMaxLength(100);

                entity.Property(e => e.TitleToShipperSentDate).HasColumnType("date");

                entity.Property(e => e.VIN).HasMaxLength(100);

                entity.Property(e => e.VehicleColor).HasMaxLength(100);

                entity.Property(e => e.VehicleMake).HasMaxLength(100);

                entity.Property(e => e.VehicleModel).HasMaxLength(100);

                entity.Property(e => e.VehicleType).HasMaxLength(100);

                entity.Property(e => e.VehicleValue).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VehicleYear).HasMaxLength(100);

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.WeightLb).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderOceanFreightVehicle)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightVehicle_jobs_ServiceOrder");

                entity.HasOne(d => d.ServiceOrderOceanFreightContainer)
                    .WithMany(p => p.ServiceOrderOceanFreightVehicle)
                    .HasForeignKey(d => d.ServiceOrderOceanFreightContainerId)
                    .HasConstraintName("FK_jobs_ServiceOrderOceanFreightVehicle_jobs_ServiceOrderOceanFreightContainer");
            });

            modelBuilder.Entity<ServiceOrderRoadFreight>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderRoadFreight", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.BookingDate).HasColumnType("date");

                entity.Property(e => e.CountryOfIssue).HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EINNumber).HasMaxLength(100);

                entity.Property(e => e.ITNFiledDate).HasColumnType("date");

                entity.Property(e => e.ITNNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.QuotedUnit).HasMaxLength(100);

                entity.Property(e => e.XTNNumber).HasMaxLength(100);

                entity.HasOne(d => d.CarrierVendor)
                    .WithMany(p => p.ServiceOrderRoadFreight)
                    .HasForeignKey(d => d.CarrierVendorId)
                    .HasConstraintName("FK_jobs_ServiceOrderRoadFreight_Vendor");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderRoadFreight)
                    .HasForeignKey<ServiceOrderRoadFreight>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderRoadFreight_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderRoadFreightLTL>(entity =>
            {
                entity.ToTable("ServiceOrderRoadFreightLTL", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.DimensionsFT).HasMaxLength(100);

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderRoadFreightLTL)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderRoadFreightLTL_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderRoadFreightLeg>(entity =>
            {
                entity.ToTable("ServiceOrderRoadFreightLeg", "jobs");

                entity.Property(e => e.ActualArrivalDate).HasColumnType("date");

                entity.Property(e => e.ActualDepartureDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DestinationLoCode).HasMaxLength(5);

                entity.Property(e => e.DestinationName).HasMaxLength(100);

                entity.Property(e => e.EstimatedArrivalDate).HasColumnType("date");

                entity.Property(e => e.EstimatedDepartureDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.OriginLoCode).HasMaxLength(5);

                entity.Property(e => e.OriginName).HasMaxLength(100);

                entity.Property(e => e.ProNumber).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderRoadFreightLeg)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderRoadFreightLeg_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderStatus>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderStatusIdentifier);

                entity.ToTable("ServiceOrderStatus", "jobs");

                entity.Property(e => e.ServiceOrderStatusIdentifier).HasMaxLength(50);

                entity.Property(e => e.ServiceOrderStatusDescription).HasMaxLength(500);

                entity.Property(e => e.ServiceOrderStatusDisplayName).HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceOrderStorage>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderStorage", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ActualDateIn).HasColumnType("date");

                entity.Property(e => e.ActualDateOut).HasColumnType("date");

                entity.Property(e => e.AgentType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.InsuranceCostRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InsuranceCostUnit).HasMaxLength(100);

                entity.Property(e => e.InsuranceCurrency).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.StorageCostRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.StorageCostUnit).HasMaxLength(100);

                entity.Property(e => e.StorageCurrency).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderStorage)
                    .HasForeignKey<ServiceOrderStorage>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderStorage_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderStoragePartialDelivery>(entity =>
            {
                entity.ToTable("ServiceOrderStoragePartialDelivery", "jobs");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateIn).HasColumnType("date");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateOut).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ReferenceType).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderStoragePartialDelivery)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderStoragePartialDelivery_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderStorageRevenue>(entity =>
            {
                entity.ToTable("ServiceOrderStorageRevenue", "jobs");

                entity.Property(e => e.BillToType).HasMaxLength(100);

                entity.Property(e => e.BillingCycle).HasMaxLength(100);

                entity.Property(e => e.BillingRecordEndDate).HasColumnType("date");

                entity.Property(e => e.ContactEmail).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.FreePeriodEndDate).HasColumnType("date");

                entity.Property(e => e.FreePeriodStartDate).HasColumnType("date");

                entity.Property(e => e.InsuranceCostRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InsuranceCostUnit).HasMaxLength(100);

                entity.Property(e => e.InsuranceCurrency).HasMaxLength(100);

                entity.Property(e => e.IsActive).HasDefaultValueSql("0");

                entity.Property(e => e.IsArrears).HasDefaultValueSql("0");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.StorageBillableWeightLb).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.StorageCostRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.StorageCostUnit).HasMaxLength(100);

                entity.Property(e => e.StorageCurrency).HasMaxLength(100);

                entity.Property(e => e.StorageEffectiveBillDate).HasColumnType("date");

                entity.HasOne(d => d.BillToAccountEntity)
                    .WithMany(p => p.ServiceOrderStorageRevenue)
                    .HasForeignKey(d => d.BillToAccountEntityId)
                    .HasConstraintName("FK_Jobs_ServiceOrderStorageRevenue_dbo_AccountEntityId");

                entity.HasOne(d => d.BillToTransferee)
                    .WithMany(p => p.ServiceOrderStorageRevenue)
                    .HasForeignKey(d => d.BillToTransfereeId)
                    .HasConstraintName("FK_Jobs_ServiceOrderStorageRevenue_dbo_Transferee");

                entity.HasOne(d => d.BillToVendor)
                    .WithMany(p => p.ServiceOrderStorageRevenue)
                    .HasForeignKey(d => d.BillToVendorId)
                    .HasConstraintName("FK_Jobs_ServiceOrderStorageRevenue_dbo_Vendor");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderStorageRevenue)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderStorageRevenue_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderThirdParty>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderId);

                entity.ToTable("ServiceOrderThirdParty", "jobs");

                entity.Property(e => e.ServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ActualServiceDate).HasColumnType("date");

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.QuoteTotal).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RequestedServiceDate).HasColumnType("date");

                entity.Property(e => e.TotalCrateVolumeCUFT).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithOne(p => p.ServiceOrderThirdParty)
                    .HasForeignKey<ServiceOrderThirdParty>(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderThirdParty_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderThirdPartyCrate>(entity =>
            {
                entity.ToTable("ServiceOrderThirdPartyCrate", "jobs");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CrateType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Depth).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Length).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.OriginOrDestination).HasMaxLength(100);

                entity.Property(e => e.ServiceDate).HasColumnType("date");

                entity.Property(e => e.Volume).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderThirdPartyCrate)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderThirdPartyCrate_jobs_ServiceOrder");
            });

            modelBuilder.Entity<ServiceOrderThirdPartyService>(entity =>
            {
                entity.ToTable("ServiceOrderThirdPartyService", "jobs");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.OriginOrDestination).HasMaxLength(100);

                entity.Property(e => e.ThirdPartyServiceName).HasMaxLength(100);

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderThirdPartyService)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_ServiceOrderThirdPartyService_jobs_ServiceOrder");
            });

            modelBuilder.Entity<Shipment>(entity =>
            {
                entity.HasKey(e => e.SuperServiceOrderId);

                entity.ToTable("Shipment", "taskorders");

                entity.HasIndex(e => e.ShipmentIdentifier)
                    .HasName("UQ_taskorders_Shipment_ShipmentIdentifier")
                    .IsUnique();

                entity.Property(e => e.SuperServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CustomerRemarks).HasMaxLength(2000);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.EstimatedWeightLb).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.ShipmentIdentifier)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ShipmentType).HasMaxLength(100);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.Shipment)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_Shipment_taskorders_TaskOrder_JobId");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithOne(p => p.Shipment)
                    .HasForeignKey<Shipment>(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_Shipment_jobs_SuperServiceOrder_Id");
            });

            modelBuilder.Entity<SuperService>(entity =>
            {
                entity.ToTable("SuperService", "service");

                entity.Property(e => e.SuperServiceIconName).HasMaxLength(50);

                entity.Property(e => e.SuperServiceName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ServiceCategory)
                    .WithMany(p => p.SuperService)
                    .HasForeignKey(d => d.ServiceCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_service_SuperService_service_ServiceCategory_ServiceCategoryId");
            });

            modelBuilder.Entity<SuperServiceMode>(entity =>
            {
                entity.ToTable("SuperServiceMode", "service");

                entity.Property(e => e.AvailableTo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("'non_military'");

                entity.Property(e => e.ModeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.SuperService)
                    .WithMany(p => p.SuperServiceMode)
                    .HasForeignKey(d => d.SuperServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SuperServiceMode_ToTable");
            });

            modelBuilder.Entity<SuperServiceOrder>(entity =>
            {
                entity.ToTable("SuperServiceOrder", "jobs");

                entity.HasIndex(e => e.DisplayId)
                    .HasName("UQ_jobs_SuperServiceOrder_DisplayId")
                    .IsUnique();

                entity.Property(e => e.AccrualStatus).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DisplayId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.SequenceNumber).HasDefaultValueSql("1");

                entity.Property(e => e.SuperServiceOrderStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("'active'");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.SuperServiceOrder)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_SuperServiceOrder_jobs_Job_JobId");

                entity.HasOne(d => d.SuperService)
                    .WithMany(p => p.SuperServiceOrder)
                    .HasForeignKey(d => d.SuperServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_SuperServiceOrder_service_SuperService_SuperServiceId");

                entity.HasOne(d => d.SuperServiceMode)
                    .WithMany(p => p.SuperServiceOrder)
                    .HasForeignKey(d => d.SuperServiceModeId)
                    .HasConstraintName("FK_SuperServiceOrder_jobs_SuperServiceMode");

                entity.HasOne(d => d.SuperServiceOrderStatusIdentifierNavigation)
                    .WithMany(p => p.SuperServiceOrder)
                    .HasForeignKey(d => d.SuperServiceOrderStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_SuperServiceOrder_jobs_SuperServiceOrderStatus_SuperServiceOrderStatusIdentifier");

                entity.HasOne(d => d.Transferee)
                    .WithMany(p => p.SuperServiceOrder)
                    .HasForeignKey(d => d.TransfereeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_jobs_SuperServiceOrder_dbo_Transferee_TransfereeId");
            });

            modelBuilder.Entity<SuperServiceOrderAccessorial>(entity =>
            {
                entity.ToTable("SuperServiceOrderAccessorial", "survey");

                entity.Property(e => e.AccessorialName).HasMaxLength(100);

                entity.Property(e => e.ThirdPartyServiceName).HasMaxLength(100);

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.SuperServiceOrderAccessorial)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SuperServiceOrderAccessorial_SuperServiceOrder");
            });

            modelBuilder.Entity<SuperServiceOrderCrate>(entity =>
            {
                entity.ToTable("SuperServiceOrderCrate", "survey");

                entity.Property(e => e.Depth).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Length).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.SuperServiceOrderCrate)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SuperServiceOrderCrate_SuperServiceOrder");
            });

            modelBuilder.Entity<SuperServiceOrderStatus>(entity =>
            {
                entity.HasKey(e => e.SuperServiceOrderStatusIdentifier);

                entity.ToTable("SuperServiceOrderStatus", "jobs");

                entity.Property(e => e.SuperServiceOrderStatusIdentifier).HasMaxLength(50);

                entity.Property(e => e.SuperServiceOrderStatusDescription).HasMaxLength(500);

                entity.Property(e => e.SuperServiceOrderStatusDisplayName).HasMaxLength(50);
            });

            modelBuilder.Entity<SuperServiceOrderSurveyResult>(entity =>
            {
                entity.HasKey(e => e.SuperServiceOrderId);

                entity.ToTable("SuperServiceOrderSurveyResult", "survey");

                entity.Property(e => e.SuperServiceOrderId).ValueGeneratedNever();

                entity.Property(e => e.ACWKg).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ACWLb).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.GrossVolumeCBM).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.GrossVolumeCUFT).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.GrossWeightKg).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.GrossWeightLb).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NetVolumeCBM).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NetVolumeCUFT).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NetWeightKg).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.NetWeightLb).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalCrateVolumeCBM).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalCrateVolumeCUFT).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithOne(p => p.SuperServiceOrderSurveyResult)
                    .HasForeignKey<SuperServiceOrderSurveyResult>(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SuperServiceOrderSurveyResult_SuperServiceOrder");
            });

            modelBuilder.Entity<TaskOrder>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("TaskOrder", "taskorders");

                entity.HasIndex(e => e.TaskOrderIdentifier)
                    .HasName("UQ_taskorders_TaskOrder_TaskOrderIdentifier")
                    .IsUnique();

                entity.Property(e => e.JobId).ValueGeneratedNever();

                entity.Property(e => e.AuthorizedRepresentative).HasMaxLength(100);

                entity.Property(e => e.CET).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DestinationDutyStationName).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.MovePriority).HasMaxLength(100);

                entity.Property(e => e.MovePriorityType).HasMaxLength(10);

                entity.Property(e => e.Notes).HasMaxLength(2000);

                entity.Property(e => e.OperationsTeam).HasMaxLength(100);

                entity.Property(e => e.OrderType).HasMaxLength(100);

                entity.Property(e => e.OriginDutyStationName).HasMaxLength(100);

                entity.Property(e => e.PreferredContactMethod).HasMaxLength(100);

                entity.Property(e => e.PreferredName).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberBranch).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberDODIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberIdentifier).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberPrimaryCommunicationPreference).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberRank).HasMaxLength(100);

                entity.Property(e => e.ServiceMemberSecondaryCommunicationPreference).HasMaxLength(100);

                entity.Property(e => e.TaskOrderIdentifier)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TaskOrderStatus).HasMaxLength(100);

                entity.HasOne(d => d.DestinationDutyStationAddress)
                    .WithMany(p => p.TaskOrderDestinationDutyStationAddress)
                    .HasForeignKey(d => d.DestinationDutyStationAddressId)
                    .HasConstraintName("FK_taskorders_TaskOrder_DestinationAddress_Id");

                entity.HasOne(d => d.Job)
                    .WithOne(p => p.TaskOrder)
                    .HasForeignKey<TaskOrder>(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_taskorders_TaskOrder_jobs_Job_JobId");

                entity.HasOne(d => d.OriginDutyStationAddress)
                    .WithMany(p => p.TaskOrderOriginDutyStationAddress)
                    .HasForeignKey(d => d.OriginDutyStationAddressId)
                    .HasConstraintName("FK_taskorders_TaskOrder_OriginAddress_Id");
            });

            modelBuilder.Entity<Template>(entity =>
            {
                entity.ToTable("Template", "merge_templates");

                entity.Property(e => e.LastRequestedAtUtc).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedAtUtc)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getutcdate()");

                entity.HasOne(d => d.TemplatePack)
                    .WithMany(p => p.Template)
                    .HasForeignKey(d => d.TemplatePackId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Templates_TemplatePack");

                entity.HasOne(d => d.TemplateType)
                    .WithMany(p => p.Template)
                    .HasForeignKey(d => d.TemplateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Templates_TemplateType");
            });

            modelBuilder.Entity<TemplatePack>(entity =>
            {
                entity.ToTable("TemplatePack", "merge_templates");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TemplateType>(entity =>
            {
                entity.ToTable("TemplateType", "merge_templates");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Transferee>(entity =>
            {
                entity.Property(e => e.AccountingId).HasDefaultValueSql("next value for [billing].seqtransfereeaccountingid");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.MiddleName).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);
            });

            modelBuilder.Entity<TransfereePhone>(entity =>
            {
                entity.HasKey(e => new { e.TransfereeId, e.PhoneId });

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Phone)
                    .WithMany(p => p.TransfereePhone)
                    .HasForeignKey(d => d.PhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransfereePhone_Phone");

                entity.HasOne(d => d.Transferee)
                    .WithMany(p => p.TransfereePhone)
                    .HasForeignKey(d => d.TransfereeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransfereePhone_Transferee");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AccountingId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Accounting_MIL_Code).HasMaxLength(50);

                entity.Property(e => e.Accounting_SI_Code).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ShortAddress).HasMaxLength(100);

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.Website).HasMaxLength(100);

                entity.HasOne(d => d.PrimaryAddress)
                    .WithMany(p => p.Vendor)
                    .HasForeignKey(d => d.PrimaryAddressId)
                    .HasConstraintName("FK_Vendor_Address");
            });

            modelBuilder.Entity<VendorInvoice>(entity =>
            {
                entity.ToTable("VendorInvoice", "payables");

                entity.HasIndex(e => new { e.BillFromVendorId, e.BillFromTransfereeId, e.BillFromAccountEntityId, e.VendorInvoiceNumber })
                    .HasName("UNC_payables_VendorInvoice_VendorId_VendorInvoiceNumber")
                    .IsUnique();

                entity.Property(e => e.BillFromType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'vendor'");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.CreditMemoExplanation).HasMaxLength(1500);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");

                entity.Property(e => e.GPDocNum)
                    .IsRequired()
                    .HasMaxLength(17);

                entity.Property(e => e.LastPaidCheckNumber).HasMaxLength(100);

                entity.Property(e => e.LastPaidDate).HasColumnType("date");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'system'");

                entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalVendorInvoiceAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.VendorInvoiceDate).HasColumnType("date");

                entity.Property(e => e.VendorInvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.VendorInvoiceStatusIdentifier)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'queued'");

                entity.Property(e => e.VendorInvoiceType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("'invoice'");

                entity.HasOne(d => d.BillFromAccountEntity)
                    .WithMany(p => p.VendorInvoice)
                    .HasForeignKey(d => d.BillFromAccountEntityId)
                    .HasConstraintName("FK_payables_VendorInvoice_dbo_AccountEntityId");

                entity.HasOne(d => d.BillFromTransferee)
                    .WithMany(p => p.VendorInvoice)
                    .HasForeignKey(d => d.BillFromTransfereeId)
                    .HasConstraintName("FK_payables_VendorInvoice_dbo_Transferee");

                entity.HasOne(d => d.BillFromVendor)
                    .WithMany(p => p.VendorInvoice)
                    .HasForeignKey(d => d.BillFromVendorId)
                    .HasConstraintName("FK_payables_VendorInvoice_dbo_VendorId");

                entity.HasOne(d => d.SuperServiceOrder)
                    .WithMany(p => p.VendorInvoice)
                    .HasForeignKey(d => d.SuperServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_payables_VendorInvoice_jobs_SuperServiceOrder_Id");

                entity.HasOne(d => d.VendorInvoiceStatusIdentifierNavigation)
                    .WithMany(p => p.VendorInvoice)
                    .HasForeignKey(d => d.VendorInvoiceStatusIdentifier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_payables_VendorInvoice_payables_VendorInvoiceStatus");
            });

            modelBuilder.Entity<VendorInvoiceStatus>(entity =>
            {
                entity.HasKey(e => e.VendorInvoiceStatusIdentifier);

                entity.ToTable("VendorInvoiceStatus", "payables");

                entity.Property(e => e.VendorInvoiceStatusIdentifier).HasMaxLength(100);

                entity.Property(e => e.VendorInvoiceStatusDescription).HasMaxLength(500);

                entity.Property(e => e.VendorInvoiceStatusName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}